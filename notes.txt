Phase 1

1. Install react-router-dom
2. Provide the route context in the index.tsx
3. Create the routed components, such as Home, About, Contact, etc.
4. Provide the router outlet of <Routes> in the App. This contains the route configuration of <Route>
5. Application now routes to the components as well as wildcard if the path is provided in the browser's address bar.

Phase 2

1. Create Navbar component and house all the links as <NavLink> in it.
2. Navbar is now composed in App

Phase 3

1. Configure the route of news to accept a route parameter called topic in App
2. Intercept the topic in News by useParams and destructuring the object
3. Navbar links for news are updated

Phase 4

1. Take a look at Customer, CustomerList, CustomerProfile, and CustomerTransaction components
2. Route configuration now has secondary route organization
3. Customer component has been declared as the layout component for the secondary routes
4. Customer component has its own secondary router outlet
5. Observe the relative path configuration within the secondary routes
6. Navbar now provides route links for customer

Phase 5
1. Context data is provided in Customer and accessed via hook in CustomerProfile

Phase 6
1. Customer specific routes are now moved to CustomerRoutes component and the top-level route is configured in App

Phase 7
1. useRoutes hook is used to organize routes in Angular fashion in App as well as CustomerRoutes

Phase 8
1. Navbar component now has different props of NavLink (of Link as well)

Phase 9
1. Home component now uses programmatic navigation using useNavigate hook

Phase 10
1. About component now uses useSearchParams to intercept and set the search params (aka query)
2. Navbar now routes to about with lang=kn query

Phase 11
1. All routes in App are lazily loaded
2. Observe the base routes being composed within Suspense component in App. This is mandatory.
3. All secondary routes in CustomerRoutes are also lazily loaded